/*
The Computer Language Benchmarks Game
http://benchmarksgame.alioth.debian.org/

nbody

Translated from Cristoph Bauer's C version
*/

import ":io";

pi := 3.141592653589793d;
solar_mass := 4.0d * pi * pi;
days_per_year := 365.24;

Body :: struct
{
    x : f64; y : f64; z : f64;
    vx : f64; vy : f64; vz : f64;
    mass : f64;
}

advance :: (body_count : s64, bodies : Body*, dt : f64) : void
{
    i : s64 = 0;
    j : s64 = 0;
    while (i < body_count)
    {
        //b1 := bodies[i];
        j = i + 1;
        while (j < body_count)
        {
            //b2 := bodies[j];
            //dx := b1.x - b2.x;
            //dy := b1.y - b2.y;
            //dz := b1.z - b2.z;
            dx := bodies[i].x - bodies[j].x;
            dy := bodies[i].y - bodies[j].y;
            dz := bodies[i].z - bodies[j].z;
            distance := sqrt(dx*dx + dy*dy + dz*dz);
            mag := dt / (distance * distance * distance);

            //bodies[i].vx -= dx * b2.mass * mag;
            //bodies[i].vy -= dy * b2.mass * mag;
            //bodies[i].vz -= dz * b2.mass * mag;
            //bodies[j].vx += dx * b1.mass * mag;
            //bodies[j].vy += dy * b1.mass * mag;
            //bodies[j].vz += dz * b1.mass * mag;
            bodies[i].vx -= dx * bodies[j].mass * mag;
            bodies[i].vy -= dy * bodies[j].mass * mag;
            bodies[i].vz -= dz * bodies[j].mass * mag;
            bodies[j].vx += dx * bodies[i].mass * mag;
            bodies[j].vy += dy * bodies[i].mass * mag;
            bodies[j].vz += dz * bodies[i].mass * mag;

            j += 1;
        }
        i += 1;
    }
    i = 0;
    while (i < body_count)
    {
        //b := bodies[i];
        bodies[i].x += dt * bodies[i].vx;
        bodies[i].y += dt * bodies[i].vy;
        bodies[i].z += dt * bodies[i].vz;
        i += 1;
    }
}

energy :: (body_count : s64, bodies : Body*) : f64
{
    result := 0.0d;

    i : s64 = 0;
    j : s64 = 0;
    while (i < body_count)
    {
        b1 := bodies[i];
        vv := (b1.vx*b1.vx + b1.vy*b1.vy + b1.vz*b1.vz);
        //print(vv);
        //println();
        result += 0.5d * b1.mass * vv;
        j = i + 1;
        while (j < body_count)
        {
            b2 := bodies[j];
            dx := b1.x - b2.x;
            dy := b1.y - b2.y;
            dz := b1.z - b2.z;
            distance := sqrt(dx*dx + dy*dy + dz*dz);
            //print("d="); print(distance); println();
            r := (b1.mass * b2.mass) / distance;
            //print("r="); print(r); println();
            result -= r;
            j += 1;
        }
        i += 1;
    }
    return result;
}

offset_momentum :: (body_count : s64, bodies : Body*) : void
{
    px : f64 = 0.0d;
    py : f64 = 0.0d;
    pz : f64 = 0.0d;
    i : s64 = 0;
    while (i < body_count)
    {
        px += bodies[i].vx * bodies[i].mass;
        py += bodies[i].vy * bodies[i].mass;
        pz += bodies[i].vz * bodies[i].mass;
        i += 1;
    }
    bodies[0].vx = -px / solar_mass;
    bodies[0].vy = -py / solar_mass;
    bodies[0].vz = -pz / solar_mass;
}

BODY_COUNT := 5;
bodies : Body*;

init_bodies :: ()
{
    //bodies = new Body[BODY_COUNT]; // no need for "first-class types"
    // or
    //bodies = new(Body, BODY_COUNT); // type as a regular argument
    // or
    //bodies = alloc(Body, BODY_COUNT);

    size_of_Body := 8 * 7;
    bodies = hp_alloc(BODY_COUNT * size_of_Body) -> Body*;
    //bodies = hp_alloc(BODY_COUNT * size_of(Body)) -> Body*;
    //bodies = hp_alloc(BODY_COUNT * Body.size) -> Body*;

    i := 0;
    // Sun
    bodies[i].x = 0.0d;
    bodies[i].y = 0.0d;
    bodies[i].z = 0.0d;
    bodies[i].vx = 0.0d;
    bodies[i].vy = 0.0d;
    bodies[i].vz = 0.0d;
    bodies[i].mass = solar_mass;

    i += 1;
    // Jupiter
    bodies[i].x = 4.84143144246472090d;
    bodies[i].y = -1.16032004402742839d;
    bodies[i].z = -1.03622044471123109e-1d;
    bodies[i].vx = 1.66007664274403694e-3d * days_per_year;
    bodies[i].vy = 7.69901118419740425e-3d * days_per_year;
    bodies[i].vz = -6.90460016972063023e-5d * days_per_year;
    bodies[i].mass = 9.54791938424326609e-4d * solar_mass;

    i += 1;
    // Saturn
    bodies[i].x = 8.34336671824457987d;
    bodies[i].y = 4.12479856412430479d;
    bodies[i].z = -4.03523417114321381e-1d;
    bodies[i].vx = -2.76742510726862411e-3d * days_per_year;
    bodies[i].vy = 4.99852801234917238e-3d * days_per_year;
    bodies[i].vz = 2.30417297573763929e-5d * days_per_year;
    bodies[i].mass = 2.85885980666130812e-4d * solar_mass;

    i += 1;
    // Uranus
    bodies[i].x = 1.28943695621391310e+1d;
    bodies[i].y = -1.51111514016986312e+1d;
    bodies[i].z = -2.23307578892655734e-1d;
    bodies[i].vx = 2.96460137564761618e-3d * days_per_year;
    bodies[i].vy = 2.37847173959480950e-3d * days_per_year;
    bodies[i].vz = -2.96589568540237556e-5d * days_per_year;
    bodies[i].mass = 4.36624404335156298e-5d * solar_mass;

    i += 1;
    // Neptune
    bodies[i].x = 1.53796971148509165e+1d;
    bodies[i].y = -2.59193146099879641e+1d;
    bodies[i].z = 1.79258772950371181e-1d;
    bodies[i].vx = 2.68067772490389322e-3d * days_per_year;
    bodies[i].vy = 1.62824170038242295e-3d * days_per_year;
    bodies[i].vz = -9.51592254519715870e-5d * days_per_year;
    bodies[i].mass = 5.15138902046611451e-5d * solar_mass;
}

print :: (x : f64, y : f64, z : f64)
{
    print(x); print(", \t"); print(y); print(", \t"); print(z);
}

print_bodies :: (body_count : s64, bodies : Body*)
{
    i := 0;
    while (i < body_count)
    {
        b := bodies[i];
        print("Body "); println(i);
        print(" p: "); print(b.x, b.y, b.z);
        println();
        print(" v: "); print(b.vx, b.vy, b.vz);
        println();
        print(" m: "); print(b.mass);
        println();
        //print("Body "); println(i);
        //print(" p: "); print(bodies[i].x, bodies[i].y, bodies[i].z);
        //println();
        //print(" v: "); print(bodies[i].vx, bodies[i].vy, bodies[i].vz);
        //println();
        //print(" m: "); print(bodies[i].mass);
        //println();
        i += 1;
    }
}

main :: ()
{
    N := 1000;
    init_bodies();

    //print_bodies(BODY_COUNT, bodies);
    //println("---");

    offset_momentum(BODY_COUNT, bodies);

    //print_bodies(BODY_COUNT, bodies);
    e := energy(BODY_COUNT, bodies);
    /*print("e = ");*/ println(e, 9);

    i : s64 = 0;
    while (i < N)
    {
        //print("advance "); println(i);
        advance(BODY_COUNT, bodies, 0.01d);
        i += 1;
    }

    //print_bodies(BODY_COUNT, bodies);
    e = energy(BODY_COUNT, bodies);
    /*print("e = ");*/ println(e, 9);

    return 0;
}


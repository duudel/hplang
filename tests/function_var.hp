// Assigning function to a variable and invoking the function through the
// variable.
// 2016-05-13

func :: (a : s32, b : f32) : bool
{
    if b < 0.0f  return false;
    return a > 0;
}

func :: (a : s8) : f32
{
    return 0.5f;
}

call_f :: (f : !(s32, f32) : bool, a : s32, b : f32) : bool
{
    return f(a, b);
}

ftype :: typealias !(s32, f32) : bool;

call_f2 :: (f : ftype, a : s32, b : f32) : bool
{
    return f(a, b);
}

test :: ()
{
    f := func;
    // TODO: Here is a problem: cannot cast. Also, how to determine, which
    // overload of func should this "func" here refer to.
    //f := func -> !(s32, f32):bool;
    //f := func!(s32, f32)bool; // Should this syntax be used for "explicit overload resolution"

    result := f(15, 0.5f);
    /*assert(*/ result == true /*)*/;

    result = call_f(f, 15, -2.5f);
    /*assert(*/ result == false /*)*/;

    result = call_f(func, 15, -2.5f);
    /*assert(*/ result == false /*)*/;

    result = call_f2(f, 0, 2.5f);
    /*assert(*/ result == true /*)*/;
}

// hplang - Syntax ideas
// 2016-04-07


// -- Import syntax

//import io; // Not good...

// This syntax seems better, as there could be a problem when the module name
// was a keyword, and dealing with that in the lexer is not ideal (IMHO).
// There still is a problem though: what to do if we want to have have
// namespace for the module?
import "io";

import if; // Would be problematic

// Could lead to this:
if if.is_true(x)  print("that's kinda ugly...")

// Oooh! idea:

import "while";         // imports to the global scope
something();

// ..and..

wh :: import "while"    // named import
wh.something();

// Problem solved! (parsing is a bit more tedious, but meh :)


// -- Types
variable : s64;
func :: () : u64;

array : s64[];
str_array : string[];
arr : *s8[][]   // array of array of pointers to s8
arr[0]  ยง       // type is *s8[]
arr[1][5]       // type is *s8

// Which one of these syntaxes is better?
array : s64*[]; // pointer to array of s64
array : *(s64[]); // pointer to array of s64

s64*[] == ((s64)*)[]

s64**[] == ((s64)**)[] == (s64**)[]



// -- Data type definition syntax

// Struct syntax for string data type.
// The builtin string will be like this (but possibly
// likely defined inside the compiler)
string :: struct
{
    length : s64;
    data : *char;
}

assert("".length == 0);
assert("".data == null);

// Enumeration type
Ast_Kind :: enum
{
    UnaryExpr,
    BinaryExpr
}

// Maybe optionally specify the underlying integral data type:
Ast_Kind :: enum(s64)
{
    ...
}

// An idea for c-like union syntax.
Ast_Node :: struct
{
    type : Ast_Kind;
    {
        Ast_UnExpr un;
        Ast_BinExpr bin;
    }
}


// -- for loops
for i := 0..10      // should the range end be inclusive?
    print("i = %d", i);

for 0..10
    print("it = %d, it); // Automatically defined iterator variable "it".

half := 2;
for -half..half
    print("%d ", it);   // Prints "-2 -1 0 1 2"

for (i := 1; i <= 10; i += 1) // maybe this should also be supported?
    print("%d ", i);


my_vector :: struct
{
    x, y, z : float;
}

do_things :: (x, y, z : float) // maybe allow this to shorten parameter list?
{ x+y+z; }

// Ideas on printing functionality and varargs
print_value(value : my_vector)
{
    print("(%f,%f,%f)", value.x, value.y, value.z);
}

print_arg(format : string, index : s64, arg : $T)
{
    cases format[index]
    {
        '#' {
            print_value(arg);
        }
        * {
            terminate_with_error("print: invalid format specifier");
        }
    }
}

print_arg(format : string, index : s64, arg : s64)
{
    assert(format[index] in ['d', 'i']);
    print_value(arg);
}

print :: (format :: string, args :: **) // :: means format and args cannot be modified (const)
{
    arg := 0;
    for 0..format.length-1
    {
        if format[it] == '%'
        {
            it++;
            assert(format.length < index, "print: Unexpected end of format string");
            if (format[it] != '%')
            {
                print_arg(format, it, args[arg]);
                arg++;
                continue;
            }
        }
        print_char(format[it]);
    }
}

print("lol")                // print
print("%d", 10)             // print!s64
print("%s %d", "lol", 12)   // print!string!s64

#bake print_specific = print<args : s64, s64, string>;

main :: ()
{
    print("Hurray!");

    var1 : s64;
    var2 : bool;

    var1 = 15 + 2;
    var2 = false;

    print("Var 1 = %d", var1);
    print("Var 1 = %d", var2);
}

// Executes the expression at compile-time
#exec main();


// hplang - Fibonacci sample
// 2016-03-31

io :: import "io";
import "io";

// Recursive Fibonacci function
fibo :: (x : s64) : s64**
{
    //assert(x >= 0);
    if x == 0   return 0;
    if x == 1   return 1;
    return fibo(x - 1) + fibo(x - 2);
}

// Iterative Fibonacci function
// (Uses type inference for the return type.)
fibo2 :: (x : s64*) // : s64
{
    a := 0; // type of a and be will be inferred to be s64
    b := 1;
    for 0..x + 1
    {
        t := a;
        a = b;
        b += t;
    }
    return a;
}

main :: () : s64
{
    print("This is a call to print\n");
    '\n' '0' 'h' 'e' 'l''l''o';
    assert(fibo(0) == 0);
    assert(fibo(1) == 1);
    assert(fibo(2) == 1);
    assert(fibo(3) == 2);
    assert(fibo(4) == 3);
    assert(fibo(5) == 5);
    assert(fibo(6) == 8);
    // assert(fibo(10) == 123);
    return 0;
}


// hplang - Fibonacci sample
// 2016-03-31

// Recursive Fibonacci function
fibo :: (x : s64) : s64
{
    assert(x >= 0);
    return (x in 0..1) ? 1 : fibo(x - 1) + fibo(x - 2);
}

// Iterative Fibonacci function
// (Uses type inference for the return type.)
fibo2 :: (x : s64) // : s64
{
    value := 1; // define variable "value"; type inferred to be s64
    for 0..x
    {
        value += value;
    }
    return value;
}

main :: () : s64
{
    print("This is a call to print\n");
    '\n' '0' 'h' 'e' 'l''l''o';
    assert(fibo(0) == 1);
    assert(fibo(1) == 1);
    assert(fibo(2) == 2);
    assert(fibo(3) == 3);
    assert(fibo(4) == 5);
    assert(fibo(5) == 8);
    // assert(fibo(10) == 123);
    return 0;
}


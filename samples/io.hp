// io module
// 2016-04-19

foreign {
    FILE :: struct { }
    get_stdout :: () : FILE*;
    get_stderr :: () : FILE*;
    get_stdin :: () : FILE*;

    fwrite :: (file : FILE*, size : s64, data : u8*) : s64;
    fprint_int :: (file : FILE*, x : s64) : s64;
}

stdout : FILE* = get_stdout();
stderr : FILE* = get_stderr();
stdin : FILE* = get_stdin();

print :: (s : string) : s64
{
    return fwrite(stdout, s.size, s.data -> u8*);
}

println :: (s : string) : s64
{
    n := print(s);
    return n + print("\n");
}

println :: () : s64
{
    return print("\n");
}

print :: (x : s64) : s64
{
    /*
    if (x == 0)  return print("0");

    neg := val < 0;
    val = (neg ? -val : val);
    val := x;
    magnitude := 1;
    while (val > 0)
    {
        val /= 10;
        magnitude *= 10;
    }

    written := 0;
    if neg  written += print("-");
    while (x > 0)
    {
        y := x / magnitude;
        x -= y * magnitude;
        magnitude /= 10;
        u8 c = ('0' -> u8) + y;
        written += fwrite(stdout, 1, &c);
    }
    return written;
    */
    return fprint_int(stdout, x);
}


// io module
// 2016-04-19

foreign {
    FILE :: struct { }
    hp_get_stdout :: () : FILE*;
    hp_get_stderr :: () : FILE*;
    hp_get_stdin :: () : FILE*;

    hp_fwrite :: (file : FILE*, size : s64, data : u8*) : s64;
    hp_fprint_uint :: (file : FILE*, x : u64) : s64;
    hp_fprint_int :: (file : FILE*, x : s64) : s64;
    hp_fprint_f64 :: (file : FILE*, x : f64) : s64;
}

stdout : FILE* = hp_get_stdout();
stderr : FILE* = hp_get_stderr();
stdin : FILE* = hp_get_stdin();

print :: (s : string) : s64
{
    return hp_fwrite(stdout, s.size, s.data -> u8*);
}

println :: (s : string) : s64
{
    n := print(s);
    return n + print("\n");
}

println :: () : s64
{
    return print("\n");
}

print :: (x : s64) : s64
{
    /*
    if (x == 0)  return print("0");

    val := x;
    neg := val < 0;
    val = (neg ? -val : val);
    magnitude := 1;
    while (val > 0)
    {
        val /= 10;
        magnitude *= 10;
    }

    written : s64 = 0;
    if neg  written += print("-");
    while (x > 0)
    {
        y := x / magnitude;
        x -= y * magnitude;
        magnitude /= 10;
        c : u8 = (('0' -> u8) + y) -> u8;
        written += hp_fwrite(stdout, 1, &c);
    }
    return written;
    */
    return hp_fprint_int(stdout, x);
}

print :: (x : f64) : s64
{
    return hp_fprint_f64(stdout, x);
}

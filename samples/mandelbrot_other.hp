/* The Computer Language Benchmarks Game
 * http://benchmarksgame.alioth.debian.org/

   Translated from C version contributed by Greg Buchholz
*/

import ":io";

//data : u8*;
//datap : u8*;

putc :: (c : u8, datap : u8**)
{
    if (c == 0) c = 32 -> u8;
    else if (c == 10) c = 10u;
    else if (c < 32) c = (120 - c) -> u8;
    else if (c > 120) c = (32 + (c - 120)) -> u8;
    //hp_fwrite(stdout, 1, &c);
    //datap[0] = c;
    dp := @datap;
    //@(@datap) = c;
    //@dp = c;
    dp += 1;
    //@dp = c;
    print(dp -> void*);
    println();
    @datap = dp;
    //println(c);
    //datap += 1;
    //datap = datap + 1;
}

main :: ()
{
    bit_num : s64 = 0;
    byte_acc : u8 = 0u;
    iter : s64 = 50;

    w, h : s64;
    limit := 2.0;

    Zr, Zi, Cr, Ci, Tr, Ti : f64;

    w = 600;
    h = 40;
    //w = h = 1600;

    data_size := (w * h >> 3) + h;
    data := alloc(data_size) -> u8*;
    datap := data;

    print(w); print(" "); println(h);

    w_mod_8 := w % 8;
    for (y := 0.0; y < h -> f64; y += 1.0)
    {
        for (x := 0.0; x < w -> f64; x += 1.0)
        {
            Zr = Zi = Tr = Ti = 0.0;
            Cr = (2.0*x/w - 1.5);
            Ci = (2.0*y/h - 1.0);

            for (i : s64 = 0; (i < iter) && (Tr+Ti <= limit*limit); i += 1)
            {
                Zi = 2.0*Zr*Zi + Ci;
                Zr = Tr - Ti + Cr;
                Tr = Zr * Zr;
                Ti = Zi * Zi;
            }

            byte_acc <<= 1;
            if (Tr+Ti <= limit*limit)
                byte_acc |= 1;

            bit_num += 1;

            if (bit_num == 8)
            {
                putc(byte_acc, &datap);
                //datap += 1;
                byte_acc = 0u;
                bit_num = 0;
            }
            else if (x == w-1)
            {
                byte_acc <<= (8 - w_mod_8);
                //byte_acc <<= (8 - w % 8);
                putc(byte_acc, &datap);
                //datap += 1;
                byte_acc = 0u;
                bit_num = 0;
            }
        }
        putc('\n' -> u8, &datap);
        //datap += 1;
    }

    //for (i : s64 = 0; i < data_size; i += 1)
    //{
    //    hp_fwrite(stdout, 1, data + i);
    //    //print(data[i]);
    //}
    //for (i : s64 = 0; i < data_size; i += 1)
    //    hp_fwrite(stdout, 1, &data[i]);
    hp_fwrite(stdout, data_size, data);
    println();

    return 0;
}

